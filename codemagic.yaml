# üöÄ Common Variables Block - Shared across all workflows
common_vars: &common_vars # üöÄ Enhanced Build Success Rate Optimizations
  GRADLE_OPTS: "-Xmx12G -XX:MaxMetaspaceSize=3G -XX:ReservedCodeCacheSize=1G -XX:+UseG1GC -XX:MaxGCPauseMillis=50 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+TieredCompilation -XX:TieredStopAtLevel=1"
  XCODE_PARALLEL_JOBS: "8"

  # üîß Build Stability Variables
  GRADLE_DAEMON: "true"
  GRADLE_PARALLEL: "true"
  GRADLE_CACHING: "true"
  GRADLE_OFFLINE: "false"
  GRADLE_CONFIGURE_ON_DEMAND: "true"
  GRADLE_BUILD_CACHE: "true"
  GRADLE_WORKER_MAX_HEAP_SIZE: "2G"

  # üéØ Flutter Optimizations
  FLUTTER_PUB_CACHE: "true"
  FLUTTER_VERBOSE: "false"
  FLUTTER_ANALYZE: "true"
  FLUTTER_TEST: "false"
  FLUTTER_BUILD_NUMBER: "auto"

  # üì¶ Asset & Network Optimizations
  ASSET_OPTIMIZATION: "true"
  IMAGE_COMPRESSION: "true"
  PARALLEL_DOWNLOADS: "true"
  DOWNLOAD_TIMEOUT: "300"
  DOWNLOAD_RETRIES: "3"

  # üõ°Ô∏è Error Prevention
  FAIL_ON_WARNINGS: "false"
  CONTINUE_ON_ERROR: "true"
  RETRY_ON_FAILURE: "true"
  MAX_RETRIES: "2"

  # üìß Email Notifications
  ENABLE_EMAIL_NOTIFICATIONS: "true"
  EMAIL_SMTP_SERVER: "smtp.gmail.com"
  EMAIL_SMTP_PORT: "587"
  EMAIL_SMTP_USER: "prasannasrie@gmail.com"
  EMAIL_SMTP_PASS: "lrnu krfm aarp urux"

  # üîÑ Build Recovery
  ENABLE_BUILD_RECOVERY: "true"
  CLEAN_ON_FAILURE: "true"
  CACHE_ON_SUCCESS: "true"

# üì± App Configuration Block
app_config: &app_config
  APP_ID: $APP_ID
  BRANCH: $BRANCH
  VERSION_NAME: $VERSION_NAME
  VERSION_CODE: $VERSION_CODE
  APP_NAME: $APP_NAME
  ORG_NAME: $ORG_NAME
  WEB_URL: $WEB_URL
  EMAIL_ID: $EMAIL_ID
  USER_NAME: $USER_NAME

# üîß Feature Flags Block
feature_flags: &feature_flags
  IS_CHATBOT: $IS_CHATBOT
  IS_SPLASH: $IS_SPLASH
  IS_PULLDOWN: $IS_PULLDOWN
  IS_BOTTOMMENU: $IS_BOTTOMMENU
  IS_LOAD_IND: $IS_LOAD_IND

# üîê Permissions Block
permissions: &permissions
  IS_CAMERA: $IS_CAMERA
  IS_LOCATION: $IS_LOCATION
  IS_MIC: $IS_MIC
  IS_NOTIFICATION: $IS_NOTIFICATION
  IS_CONTACT: $IS_CONTACT
  IS_BIOMETRIC: $IS_BIOMETRIC
  IS_CALENDAR: $IS_CALENDAR
  IS_STORAGE: $IS_STORAGE

# üé® UI Configuration Block
ui_config: &ui_config
  LOGO_URL: $LOGO_URL
  SPLASH_URL: $SPLASH_URL
  SPLASH_BG_URL: $SPLASH_BG_URL
  SPLASH_BG_COLOR: $SPLASH_BG_COLOR
  SPLASH_TAGLINE: $SPLASH_TAGLINE
  SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
  SPLASH_ANIMATION: $SPLASH_ANIMATION
  SPLASH_DURATION: $SPLASH_DURATION

  # üéØ Bottom Menu Configuration
  BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
  BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
  BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
  BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
  BOTTOMMENU_FONT: $BOTTOMMENU_FONT
  BOTTOMMENU_FONT_SIZE: $BOTTOMMENU_FONT_SIZE
  BOTTOMMENU_FONT_BOLD: $BOTTOMMENU_FONT_BOLD
  BOTTOMMENU_FONT_ITALIC: $BOTTOMMENU_FONT_ITALIC
  BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
  BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION

# üçé iOS Build Acceleration Block
ios_build_acceleration: &ios_build_acceleration
  XCODE_FAST_BUILD: "true"
  COCOAPODS_FAST_INSTALL: "true"
  XCODE_SKIP_SIGNING: "false"
  XCODE_OPTIMIZATION: "true"
  XCODE_CLEAN_BUILD: "true"
  XCODE_PARALLEL_BUILD: "true"

# üçé iOS Signing Configuration Block
ios_signing_config: &ios_signing_config
  APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL
  CERT_PASSWORD: $CERT_PASSWORD
  PROFILE_URL: $PROFILE_URL
  CERT_P12_URL: $CERT_P12_URL
  CERT_CER_URL: $CERT_CER_URL
  CERT_KEY_URL: $CERT_KEY_URL
  PROFILE_TYPE: $PROFILE_TYPE
  APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
  APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
  APP_STORE_CONNECT_API_KEY_PATH: $APP_STORE_CONNECT_API_KEY_PATH
  APPLE_TEAM_ID: $APPLE_TEAM_ID
  APNS_KEY_ID: $APNS_KEY_ID
  IS_TESTFLIGHT: $IS_TESTFLIGHT

# üì± iOS Distribution Options Block
ios_distribution_options: &ios_distribution_options
  ENABLE_DEVICE_SPECIFIC_BUILDS: $ENABLE_DEVICE_SPECIFIC_BUILDS
  INSTALL_URL: $INSTALL_URL
  DISPLAY_IMAGE_URL: $DISPLAY_IMAGE_URL
  FULL_SIZE_IMAGE_URL: $FULL_SIZE_IMAGE_URL
  THINNING: $THINNING

# üçé iOS Development Options Block
ios_development_options: &ios_development_options
  ENABLE_DEBUG_BUILD: $ENABLE_DEBUG_BUILD
  ENABLE_DEVICE_LOGGING: $ENABLE_DEVICE_LOGGING
  ENABLE_DEBUG_SYMBOLS: $ENABLE_DEBUG_SYMBOLS

workflows:
  android-free:
    name: Android Free Build
    max_build_duration: 90
    instance_type: mac_mini_m2
    environment:
      flutter: 3.32.2
      java: 17
      #      android_signing:
      #        - keystore_reference
      vars:
        <<: *common_vars
        <<: *app_config
        WORKFLOW_ID: "android-free"
        PKG_NAME: $PKG_NAME

        # üîß Feature Flags (Optimized for Free)
        PUSH_NOTIFY: "false"
        IS_DOMAIN_URL: "false"
        <<: *feature_flags
        <<: *permissions
        <<: *ui_config

    scripts:
      - name: Pre-build Setup
        script: |
          echo "üöÄ Starting Android Free Build with enhanced success rate optimizations..."
          echo "üìä Build Environment:"
          echo "  - Flutter: $(flutter --version | head -1)"
          echo "  - Java: $(java -version 2>&1 | head -1)"
          echo "  - Gradle: $(./android/gradlew --version | grep "Gradle" | head -1)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $0/1024/1024/1024 " GB"}')"

          # Enhanced error handling
          set -euo pipefail
          trap 'echo "‚ùå Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

          # Pre-build cleanup and optimization
          echo "üßπ Pre-build cleanup..."
          flutter clean
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf .dart_tool/ 2>/dev/null || true

          # Optimize Gradle
          echo "‚ö° Optimizing Gradle configuration..."
          export GRADLE_OPTS="$GRADLE_OPTS"
          export GRADLE_DAEMON=true
          export GRADLE_PARALLEL=true

          # Verify environment
          echo "‚úÖ Environment verification completed"

      - name: Build Android APK
        script: |
          chmod +x lib/scripts/android/*.sh
          chmod +x lib/scripts/utils/*.sh

          # Enhanced build with retry logic
          MAX_RETRIES=${MAX_RETRIES:-2}
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üèóÔ∏è Build attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"

            if ./lib/scripts/android/main.sh; then
              echo "‚úÖ Build completed successfully!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Build failed, retrying in 5 seconds..."
                sleep 5
                flutter clean
              else
                echo "‚ùå Build failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - output/android/app-release.apk
      - build/app/outputs/mapping/release/mapping.txt
      - build/app/outputs/logs/

  android-paid:
    name: Android Paid Build
    max_build_duration: 90
    instance_type: mac_mini_m2
    environment:
      flutter: 3.32.2
      java: 17
      #      android_signing:
      #        - keystore_reference
      vars:
        <<: *common_vars
        <<: *app_config
        WORKFLOW_ID: "android-paid"
        PKG_NAME: $PKG_NAME

        # üîß Feature Flags (Paid Features)
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_DOMAIN_URL: $IS_DOMAIN_URL
        <<: *feature_flags
        <<: *permissions
        <<: *ui_config

        # üî• Firebase Configuration
        FIREBASE_CONFIG_ANDROID: $FIREBASE_CONFIG_ANDROID

    scripts:
      - name: Pre-build Setup
        script: |
          echo "üöÄ Starting Android Paid Build with enhanced success rate optimizations..."
          echo "üìä Build Environment:"
          echo "  - Flutter: $(flutter --version | head -1)"
          echo "  - Java: $(java -version 2>&1 | head -1)"
          echo "  - Gradle: $(./android/gradlew --version | grep "Gradle" | head -1)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $0/1024/1024/1024 " GB"}')"

          # Enhanced error handling
          set -euo pipefail
          trap 'echo "‚ùå Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

          # Pre-build cleanup and optimization
          echo "üßπ Pre-build cleanup..."
          flutter clean
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf .dart_tool/ 2>/dev/null || true

          # Optimize Gradle
          echo "‚ö° Optimizing Gradle configuration..."
          export GRADLE_OPTS="$GRADLE_OPTS"
          export GRADLE_DAEMON=true
          export GRADLE_PARALLEL=true

          # Verify Firebase configuration
          if [ -n "$FIREBASE_CONFIG_ANDROID" ]; then
            echo "üî• Firebase configuration detected"
          else
            echo "‚ö†Ô∏è No Firebase configuration provided"
          fi

          # Verify environment
          echo "‚úÖ Environment verification completed"

      - name: Build Android APK
        script: |
          chmod +x lib/scripts/android/*.sh
          chmod +x lib/scripts/utils/*.sh

          # Enhanced build with retry logic
          MAX_RETRIES=${MAX_RETRIES:-2}
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üèóÔ∏è Build attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"

            if ./lib/scripts/android/main.sh; then
              echo "‚úÖ Build completed successfully!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Build failed, retrying in 5 seconds..."
                sleep 5
                flutter clean
              else
                echo "‚ùå Build failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - output/android/app-release.apk
      - build/app/outputs/mapping/release/mapping.txt
      - build/app/outputs/logs/

  android-publish:
    name: Android Publish Build
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      flutter: 3.32.2
      java: 17
      #      android_signing:
      #        - keystore_reference
      vars:
        <<: *common_vars
        MAX_RETRIES: "3" # Override for publish workflow
        <<: *app_config
        WORKFLOW_ID: "android-publish"
        PKG_NAME: $PKG_NAME

        # üîß Feature Flags (Production Features)
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_DOMAIN_URL: $IS_DOMAIN_URL
        <<: *feature_flags
        <<: *permissions
        <<: *ui_config

        # üî• Firebase Configuration
        FIREBASE_CONFIG_ANDROID: $FIREBASE_CONFIG_ANDROID

        # üîê Keystore Configuration
        KEY_STORE_URL: $KEY_STORE_URL
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD

    scripts:
      - name: Pre-build Setup
        script: |
          echo "üöÄ Starting Android Publish Build with enhanced success rate optimizations..."
          echo "üìä Build Environment:"
          echo "  - Flutter: $(flutter --version | head -1)"
          echo "  - Java: $(java -version 2>&1 | head -1)"
          echo "  - Gradle: $(./android/gradlew --version | grep "Gradle" | head -1)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $0/1024/1024/1024 " GB"}')"

          # Enhanced error handling
          set -euo pipefail
          trap 'echo "‚ùå Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

          # Pre-build cleanup and optimization
          echo "üßπ Pre-build cleanup..."
          flutter clean
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf .dart_tool/ 2>/dev/null || true

          # Optimize Gradle
          echo "‚ö° Optimizing Gradle configuration..."
          export GRADLE_OPTS="$GRADLE_OPTS"
          export GRADLE_DAEMON=true
          export GRADLE_PARALLEL=true

          # Verify Firebase configuration
          if [ -n "$FIREBASE_CONFIG_ANDROID" ]; then
            echo "üî• Firebase configuration detected"
          else
            echo "‚ö†Ô∏è No Firebase configuration provided"
          fi

          # Verify keystore configuration
          if [ -n "$KEY_STORE_URL" ]; then
            echo "üîê Keystore configuration detected"
          else
            echo "‚ö†Ô∏è No keystore configuration provided"
          fi

          # Verify environment
          echo "‚úÖ Environment verification completed"

      - name: Build Android APK and AAB
        script: |
          chmod +x lib/scripts/android/*.sh
          chmod +x lib/scripts/utils/*.sh

          # Enhanced build with retry logic
          MAX_RETRIES=${MAX_RETRIES:-3}
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üèóÔ∏è Build attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"

            if ./lib/scripts/android/main.sh; then
              echo "‚úÖ Build completed successfully!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Build failed, retrying in 60 seconds..."
                sleep 60
                flutter clean
              else
                echo "‚ùå Build failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
      - output/android/app-release.apk
      - output/android/app-release.aab
      - build/app/outputs/mapping/release/mapping.txt
      - build/app/outputs/logs/

  ios-workflow:
    name: iOS Universal Build (App Store + Ad Hoc + Enterprise + Development)
    max_build_duration: 90
    instance_type: mac_mini_m2
    environment:
      flutter: 3.32.2
      java: 17
      xcode: 15.4
      cocoapods: 1.16.2
      vars:
        <<: *common_vars
        <<: *ios_build_acceleration
        <<: *app_config
        WORKFLOW_ID: "ios-workflow"
        BUNDLE_ID: $BUNDLE_ID

        # üîß Feature Flags
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_DOMAIN_URL: $IS_DOMAIN_URL
        <<: *feature_flags
        <<: *permissions
        <<: *ui_config

        # üî• Firebase Configuration
        FIREBASE_CONFIG_IOS: $FIREBASE_CONFIG_IOS

        # üçé iOS Signing Configuration (Universal - All Profile Types)
        <<: *ios_signing_config

        # üì± iOS Distribution Options
        <<: *ios_distribution_options

        # üçé iOS Development Options
        <<: *ios_development_options

        # üìß Email Configuration (for notifications)
        ENABLE_EMAIL_NOTIFICATIONS: $ENABLE_EMAIL_NOTIFICATIONS
        EMAIL_SMTP_SERVER: $EMAIL_SMTP_SERVER
        EMAIL_SMTP_PORT: $EMAIL_SMTP_PORT
        EMAIL_SMTP_USER: $EMAIL_SMTP_USER
        EMAIL_SMTP_PASS: $EMAIL_SMTP_PASS

        # üîß Build Environment Variables
        CM_BUILD_ID: $CM_BUILD_ID
        CM_BUILD_DIR: $CM_BUILD_DIR
        OUTPUT_DIR: "output/ios"

    scripts:
      - name: Pre-build Setup
        script: |
          echo "üöÄ Starting iOS Universal Build with Two-Stage Podfile Injection..."
          echo "üìä Build Environment:"
          echo "  - Flutter: $(flutter --version | head -1)"
          echo "  - Java: $(java -version 2>&1 | head -1)"
          echo "  - Xcode: $(xcodebuild -version | head -1)"
          echo "  - CocoaPods: $(pod --version)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $0/1024/1024/1024 " GB"}')"
          echo "  - Profile Type: $PROFILE_TYPE"

          # Enhanced error handling
          set -euo pipefail
          trap 'echo "‚ùå Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

          # Pre-build cleanup and optimization
          echo "üßπ Pre-build cleanup..."
          flutter clean
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf .dart_tool/ 2>/dev/null || true
          rm -rf ios/Pods/ 2>/dev/null || true
          rm -rf ios/build/ 2>/dev/null || true

          # Optimize Xcode
          echo "‚ö° Optimizing Xcode configuration..."
          export XCODE_FAST_BUILD=true
          export COCOAPODS_FAST_INSTALL=true

          # Verify Firebase configuration
          if [ -n "$FIREBASE_CONFIG_IOS" ]; then
            echo "üî• Firebase configuration detected"
          else
            echo "‚ö†Ô∏è No Firebase configuration provided"
          fi

          # Enhanced Firebase validation based on PUSH_NOTIFY
          echo "üîç Validating Firebase configuration..."
          if [ "${PUSH_NOTIFY:-false}" = "true" ]; then
            echo "üîî Push notifications ENABLED - Firebase required"
            if [ -z "$FIREBASE_CONFIG_IOS" ]; then
              echo "‚ùå FIREBASE_CONFIG_IOS is required when PUSH_NOTIFY is true"
              exit 1
            else
              echo "‚úÖ Firebase configuration provided for push notifications"
            fi
          else
            echo "üîï Push notifications DISABLED - Firebase optional"
            if [ -n "$FIREBASE_CONFIG_IOS" ]; then
              echo "‚ö†Ô∏è Firebase configuration provided but PUSH_NOTIFY is false"
              echo "   Firebase will be disabled during build"
            fi
          fi

          # Verify iOS signing configuration
          if [ -n "$CERT_PASSWORD" ] && [ -n "$PROFILE_URL" ]; then
            echo "üîê iOS signing configuration detected"
          else
            echo "‚ö†Ô∏è Incomplete iOS signing configuration"
          fi

          # Enhanced profile type validation
          echo "üîç Validating profile type: $PROFILE_TYPE"
          case "$PROFILE_TYPE" in
            "app-store"|"ad-hoc"|"enterprise"|"development")
              echo "‚úÖ Valid profile type: $PROFILE_TYPE"
              ;;
            *)
              echo "‚ùå Invalid profile type: $PROFILE_TYPE"
              echo "   Supported types: app-store, ad-hoc, enterprise, development"
              exit 1
              ;;
          esac

          # Verify environment
          echo "‚úÖ Environment verification completed"

          # Enhanced build process validation
          echo "üîç Validating build process components..."

          # Get absolute path to project root
          PROJECT_ROOT=$(pwd)
          echo "üìÅ Project root: $PROJECT_ROOT"

          # Check for required scripts with absolute paths
          if [ -f "$PROJECT_ROOT/lib/scripts/ios/build_ipa.sh" ]; then
            echo "‚úÖ Enhanced build script found: $PROJECT_ROOT/lib/scripts/ios/build_ipa.sh"
          else
            echo "‚ùå Enhanced build script not found at: $PROJECT_ROOT/lib/scripts/ios/build_ipa.sh"
            echo "üìÇ Checking directory contents:"
            ls -la "$PROJECT_ROOT/lib/scripts/ios/" 2>/dev/null || echo "Directory not accessible"
            exit 1
          fi

          if [ -f "$PROJECT_ROOT/lib/scripts/ios/code_signing.sh" ]; then
            echo "‚úÖ Enhanced code signing script found: $PROJECT_ROOT/lib/scripts/ios/code_signing.sh"
          else
            echo "‚ùå Enhanced code signing script not found at: $PROJECT_ROOT/lib/scripts/ios/code_signing.sh"
            exit 1
          fi

          if [ -f "$PROJECT_ROOT/lib/scripts/ios/firebase.sh" ]; then
            echo "‚úÖ Firebase script found: $PROJECT_ROOT/lib/scripts/ios/firebase.sh"
          else
            echo "‚ùå Firebase script not found at: $PROJECT_ROOT/lib/scripts/ios/firebase.sh"
            exit 1
          fi

          if [ -f "$PROJECT_ROOT/lib/scripts/ios/generate_podfile.sh" ]; then
            echo "‚úÖ Podfile generator found: $PROJECT_ROOT/lib/scripts/ios/generate_podfile.sh"
          else
            echo "‚ùå Podfile generator not found at: $PROJECT_ROOT/lib/scripts/ios/generate_podfile.sh"
            exit 1
          fi

          echo "‚úÖ Build process components validated"
      - name: Setup Fastlane
        script: |
          echo "üì¶ Installing fastlane..."
          gem install fastlane
          fastlane --version
          echo "‚úÖ Fastlane setup completed"
      - name: Build iOS app
        script: |
          chmod +x lib/scripts/ios/main.sh
          ./lib/scripts/ios/main.sh

      - name: Optional Fastlane Export (if available)
        script: |
          # Check if fastlane is available and IPA wasn't already created
          if command -v fastlane &> /dev/null && [ ! -f "output/ios/Runner.ipa" ] && [ -d "output/ios/Runner.xcarchive" ] && [ -f "ios/ExportOptions.plist" ]; then
            echo "üöÄ Fastlane available - attempting alternative export..."
            echo "üìã ExportOptions.plist contents:"
            cat ios/ExportOptions.plist
            
            # Create basic Gemfile if it doesn't exist
            if [ ! -f "Gemfile" ]; then
              echo "üìù Creating basic Gemfile for fastlane..."
              echo "source 'https://rubygems.org'" > Gemfile
              echo "" >> Gemfile
              echo "gem 'fastlane'" >> Gemfile
              echo "gem 'cocoapods'" >> Gemfile
              echo "‚úÖ Gemfile created"
            fi
            
            # Install fastlane if needed
            if [ ! -d ".bundle" ]; then
              echo "üì¶ Installing fastlane dependencies..."
              bundle install --path .bundle || echo "‚ö†Ô∏è Bundle install failed, trying without bundle"
            fi
            
            # Try fastlane gym export
            if [ -d ".bundle" ]; then
              echo "üîß Using bundle exec for fastlane..."
              bundle exec fastlane gym \
                --archive_path output/ios/Runner.xcarchive \
                --export_options ios/ExportOptions.plist \
                --output_directory output/ios/ \
                --output_name Runner.ipa \
                --clean
            else
              echo "üîß Using direct fastlane command..."
              fastlane gym \
                --archive_path output/ios/Runner.xcarchive \
                --export_options ios/ExportOptions.plist \
                --output_directory output/ios/ \
                --output_name Runner.ipa \
                --clean
            fi
            
            # Check if export was successful
            if [ -f "output/ios/Runner.ipa" ]; then
              echo "‚úÖ Fastlane export successful!"
              echo "üìä IPA size: $(du -h output/ios/Runner.ipa | cut -f1)"
              echo "üéØ Profile Type: $PROFILE_TYPE"
              echo "üì¶ Ready for distribution"
            else
              echo "‚ö†Ô∏è Fastlane export failed, but archive is still available"
              echo "üì¶ Archive available at: output/ios/Runner.xcarchive"
              echo "üîß Manual export command:"
              echo "   xcodebuild -exportArchive -archivePath output/ios/Runner.xcarchive -exportPath output/ios/ -exportOptionsPlist ios/ExportOptions.plist"
            fi
          else
            if ! command -v fastlane &> /dev/null; then
              echo "‚ÑπÔ∏è Fastlane not available, skipping fastlane export"
            elif [ -f "output/ios/Runner.ipa" ]; then
              echo "‚ÑπÔ∏è IPA already exists from main build, skipping fastlane export"
            elif [ ! -d "output/ios/Runner.xcarchive" ]; then
              echo "‚ÑπÔ∏è Archive not found, skipping fastlane export"
            elif [ ! -f "ios/ExportOptions.plist" ]; then
              echo "‚ÑπÔ∏è ExportOptions.plist not found, skipping fastlane export"
            fi
          fi

      - name: Direct IPA Export (if archive exists)
        script: |
          # Check if archive exists and IPA doesn't
          if [ -d "output/ios/Runner.xcarchive" ] && [ ! -f "output/ios/Runner.ipa" ] && [ -f "ios/ExportOptions.plist" ]; then
            echo "üöÄ Attempting direct IPA export with App Store Connect API..."
            echo "üìã ExportOptions.plist contents:"
            cat ios/ExportOptions.plist
            
            # Check if App Store Connect API credentials are available
            if [[ -n "${APP_STORE_CONNECT_KEY_IDENTIFIER}" && -n "${APP_STORE_CONNECT_API_KEY_PATH}" && -n "${APP_STORE_CONNECT_ISSUER_ID}" ]]; then
              echo "üîê App Store Connect API credentials detected"
              echo "   Key ID: ${APP_STORE_CONNECT_KEY_IDENTIFIER}"
              echo "   Issuer ID: ${APP_STORE_CONNECT_ISSUER_ID}"
              echo "   API Key Path: ${APP_STORE_CONNECT_API_KEY_PATH}"
              
              # Download API key if it's a URL
              if [[ "${APP_STORE_CONNECT_API_KEY_PATH}" == http* ]]; then
                echo "üì• Downloading API key from URL..."
                API_KEY_PATH="/tmp/AuthKey.p8"
                if curl -fsSL -o "${API_KEY_PATH}" "${APP_STORE_CONNECT_API_KEY_PATH}"; then
                  echo "‚úÖ API key downloaded to ${API_KEY_PATH}"
                  
                  # Try export with App Store Connect API authentication
                  echo "üîê Attempting export with App Store Connect API authentication..."
                  xcodebuild -exportArchive \
                    -archivePath output/ios/Runner.xcarchive \
                    -exportPath output/ios/ \
                    -exportOptionsPlist ios/ExportOptions.plist \
                    -authenticationKeyPath "${API_KEY_PATH}" \
                    -authenticationKeyID "${APP_STORE_CONNECT_KEY_IDENTIFIER}" \
                    -authenticationKeyIssuerID "${APP_STORE_CONNECT_ISSUER_ID}"
                  
                  if [ -f "output/ios/Runner.ipa" ]; then
                    echo "‚úÖ Direct export with App Store Connect API successful!"
                    echo "üìä IPA size: $(du -h output/ios/Runner.ipa | cut -f1)"
                    echo "üéØ Profile Type: $PROFILE_TYPE"
                    echo "üì¶ Ready for App Store Connect upload"
                  else
                    echo "‚ö†Ô∏è Direct export failed, but archive is still available"
                  fi
                else
                  echo "‚ùå Failed to download API key, trying standard export..."
                  xcodebuild -exportArchive \
                    -archivePath output/ios/Runner.xcarchive \
                    -exportPath output/ios/ \
                    -exportOptionsPlist ios/ExportOptions.plist \
                    -allowProvisioningUpdates
                fi
              else
                echo "‚ö†Ô∏è API key path is not a URL, trying standard export..."
                xcodebuild -exportArchive \
                  -archivePath output/ios/Runner.xcarchive \
                  -exportPath output/ios/ \
                  -exportOptionsPlist ios/ExportOptions.plist \
                  -allowProvisioningUpdates
              fi
            else
              echo "‚ÑπÔ∏è App Store Connect API credentials not provided, trying standard export..."
              xcodebuild -exportArchive \
                -archivePath output/ios/Runner.xcarchive \
                -exportPath output/ios/ \
                -exportOptionsPlist ios/ExportOptions.plist \
                -allowProvisioningUpdates
            fi
            
            # Final check
            if [ -f "output/ios/Runner.ipa" ]; then
              echo "‚úÖ IPA export completed successfully!"
              echo "üìä IPA size: $(du -h output/ios/Runner.ipa | cut -f1)"
              echo "üì¶ Ready for distribution"
            else
              echo "‚ö†Ô∏è All export attempts failed, but archive is available"
              echo "üì¶ Archive available at: output/ios/Runner.xcarchive"
              echo "üîß Manual export command:"
              echo "   xcodebuild -exportArchive -archivePath output/ios/Runner.xcarchive -exportPath output/ios/ -exportOptionsPlist ios/ExportOptions.plist"
            fi
          else
            if [ ! -d "output/ios/Runner.xcarchive" ]; then
              echo "‚ÑπÔ∏è Archive not found, skipping direct export"
            elif [ -f "output/ios/Runner.ipa" ]; then
              echo "‚ÑπÔ∏è IPA already exists, skipping direct export"
            elif [ ! -f "ios/ExportOptions.plist" ]; then
              echo "‚ÑπÔ∏è ExportOptions.plist not found, skipping direct export"
            fi
          fi

    artifacts:
      # üì± IPA Files (Primary artifacts)
      - output/ios/*.ipa
      - build/ios/ipa/*.ipa
      - ios/build/*.ipa
      - "*.ipa"

      # üì¶ Archive Files (When IPA export fails)
      - output/ios/*.xcarchive
      - build/ios/archive/*.xcarchive
      - ios/build/*.xcarchive
      - "*.xcarchive"

      # üìã Build Documentation
      - output/ios/ARTIFACTS_SUMMARY.txt
      - ios/ExportOptions.plist

      # üìä Build Logs
      - build/ios/logs/
      - output/ios/logs/

      # üîß Additional Build Artifacts
      - output/ios/
      - build/ios/
  auto-ios-workflow:
    name: Auto iOS Universal Build (with Dynamic Signing)
    max_build_duration: 90
    instance_type: mac_mini_m2
    environment:
      flutter: 3.32.2
      java: 17
      xcode: 15.4
      cocoapods: 1.16.2
      ruby: 3.2.2
      vars:
        <<: *common_vars
        <<: *ios_build_acceleration
        <<: *app_config
        WORKFLOW_ID: "auto-ios-workflow"
        BUNDLE_ID: $BUNDLE_ID
        PROFILE_TYPE: $PROFILE_TYPE # app-store, ad-hoc, enterprise, development
        APPLE_ID: $APPLE_ID # Your Apple Developer email
        APPLE_ID_PASSWORD: $APPLE_ID_PASSWORD
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        APP_STORE_CONNECT_API_KEY_PATH: $APP_STORE_CONNECT_API_KEY_PATH
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        APNS_KEY_ID: $APNS_KEY_ID
        IS_TESTFLIGHT: $IS_TESTFLIGHT

        # üîß Feature Flags
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_DOMAIN_URL: $IS_DOMAIN_URL
        <<: *feature_flags
        <<: *permissions
        <<: *ui_config

        # üî• Firebase Configuration
        FIREBASE_CONFIG_IOS: $FIREBASE_CONFIG_IOS

        # üîê Optional Certificate Fallbacks (for manual approach)
        CERT_P12_URL: $CERT_P12_URL # Optional: P12 certificate URL
        CERT_CER_URL: $CERT_CER_URL # Optional: CER certificate URL
        CERT_KEY_URL: $CERT_KEY_URL # Optional: KEY certificate URL
        PROFILE_URL: $PROFILE_URL # Optional: Provisioning profile URL
        CERT_PASSWORD: $CERT_PASSWORD # Optional: Certificate password

    scripts:
      - name: Install fastlane and dependencies
        script: |
          echo "üöÄ Installing fastlane and dependencies..."
          gem install fastlane
          fastlane --version
          echo "‚úÖ Fastlane installation completed"

      - name: Auto iOS Build with Dynamic Signing
        script: |
          echo "üöÄ Starting Auto iOS Workflow with minimal variables..."
          echo "üìä Build Environment:"
          echo "  - Flutter: $(flutter --version | head -1)"
          echo "  - Xcode: $(xcodebuild -version | head -1)"
          echo "  - CocoaPods: $(pod --version)"
          echo "  - Fastlane: $(fastlane --version | head -1)"
          echo "  - Bundle ID: ${BUNDLE_ID}"
          echo "  - Profile Type: ${PROFILE_TYPE}"
          echo "  - App Name: ${APP_NAME}"

          # Enhanced error handling
          set -euo pipefail
          trap 'echo "‚ùå Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

          # Make scripts executable
          chmod +x lib/scripts/ios/auto_main.sh
          chmod +x lib/scripts/utils/*.sh

          # Run the auto iOS build script
          bash lib/scripts/ios/auto_main.sh

    artifacts:
      - output/ios/*.ipa
      - build/ios/ipa/*.ipa
      - ios/build/*.ipa
      - "*.ipa"
      - output/ios/*.xcarchive
      - build/ios/archive/*.xcarchive
      - ios/build/*.xcarchive
      - "*.xcarchive"
      - output/ios/ARTIFACTS_SUMMARY.txt
      - ios/ExportOptions.plist
      - build/ios/logs/
      - output/ios/logs/
      - output/ios/
      - build/ios/
  combined:
    name: Universal Combined Build (Android + iOS)
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      flutter: 3.32.2
      java: 17
      xcode: 15.4
      cocoapods: 1.16.2
      vars:
        <<: *common_vars
        MAX_RETRIES: "3" # Override for combined workflow
        <<: *ios_build_acceleration
        <<: *app_config
        WORKFLOW_ID: "combined"
        PKG_NAME: $PKG_NAME
        BUNDLE_ID: $BUNDLE_ID

        # üîß Feature Flags (Auto-detected)
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_DOMAIN_URL: $IS_DOMAIN_URL
        <<: *feature_flags
        <<: *permissions
        <<: *ui_config

        # üî• Firebase Configuration (Auto-detected)
        FIREBASE_CONFIG_ANDROID: $FIREBASE_CONFIG_ANDROID
        FIREBASE_CONFIG_IOS: $FIREBASE_CONFIG_IOS

        # üîê Android Keystore Configuration
        KEY_STORE_URL: $KEY_STORE_URL
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD

        # üçé iOS Signing Configuration
        <<: *ios_signing_config

        # üì± iOS Distribution Options
        <<: *ios_distribution_options

        # üçé iOS Development Options
        <<: *ios_development_options

    scripts:
      - name: Pre-build Setup
        script: |
          echo "üöÄ Starting Universal Combined Build with enhanced success rate optimizations..."
          echo "üìä Build Environment:"
          echo "  - Flutter: $(flutter --version | head -1)"
          echo "  - Java: $(java -version 2>&1 | head -1)"
          echo "  - Xcode: $(xcodebuild -version | head -1)"
          echo "  - CocoaPods: $(pod --version)"
          echo "  - Gradle: $(./android/gradlew --version | grep "Gradle" | head -1)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $0/1024/1024/1024 " GB"}')"

          # Enhanced error handling
          set -euo pipefail
          trap 'echo "‚ùå Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

          # Pre-build cleanup and optimization
          echo "üßπ Pre-build cleanup..."
          flutter clean
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf .dart_tool/ 2>/dev/null || true
          rm -rf ios/Pods/ 2>/dev/null || true
          rm -rf ios/build/ 2>/dev/null || true

          # Optimize Gradle
          echo "‚ö° Optimizing Gradle configuration..."
          export GRADLE_OPTS="$GRADLE_OPTS"
          export GRADLE_DAEMON=true
          export GRADLE_PARALLEL=true

          # Optimize Xcode
          echo "‚ö° Optimizing Xcode configuration..."
          export XCODE_FAST_BUILD=true
          export COCOAPODS_FAST_INSTALL=true

          # Verify Firebase configuration
          if [ -n "$FIREBASE_CONFIG_ANDROID" ]; then
            echo "üî• Android Firebase configuration detected"
          else
            echo "‚ö†Ô∏è No Android Firebase configuration provided"
          fi

          if [ -n "$FIREBASE_CONFIG_IOS" ]; then
            echo "üî• iOS Firebase configuration detected"
          else
            echo "‚ö†Ô∏è No iOS Firebase configuration provided"
          fi

          # Verify Android keystore configuration
          if [ -n "$KEY_STORE_URL" ]; then
            echo "üîê Android keystore configuration detected"
          else
            echo "‚ö†Ô∏è No Android keystore configuration provided"
          fi

          # Verify iOS signing configuration
          if [ -n "$CERT_PASSWORD" ] && [ -n "$PROFILE_URL" ]; then
            echo "üîê iOS signing configuration detected"
          else
            echo "‚ö†Ô∏è Incomplete iOS signing configuration"
          fi

          # Verify environment
          echo "‚úÖ Environment verification completed"

      - name: Universal Combined Build
        script: |
          chmod +x lib/scripts/combined/*.sh
          chmod +x lib/scripts/utils/*.sh

          # Enhanced build with retry logic
          MAX_RETRIES=${MAX_RETRIES:-3}
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üèóÔ∏è Build attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"

            if ./lib/scripts/combined/main.sh; then
              echo "‚úÖ Build completed successfully!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Build failed, retrying in 10 seconds..."
                sleep 10
                flutter clean
              else
                echo "‚ùå Build failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

    artifacts:
      # üì± Android Artifacts
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
      - output/android/app-release.apk
      - output/android/app-release.aab
      - build/app/outputs/mapping/release/mapping.txt

      # üì± iOS IPA Files (Primary artifacts)
      - output/ios/*.ipa
      - build/ios/ipa/*.ipa
      - ios/build/*.ipa
      - "*.ipa"

      # üì¶ iOS Archive Files (When IPA export fails)
      - output/ios/*.xcarchive
      - build/ios/archive/*.xcarchive
      - ios/build/*.xcarchive
      - "*.xcarchive"

      # üìã Build Documentation
      - output/ios/ARTIFACTS_SUMMARY.txt
      - ios/ExportOptions.plist

      # üìä Build Logs
      - build/app/outputs/logs/
      - build/ios/logs/
      - output/ios/logs/

      # üîß Additional Build Artifacts
      - output/android/
      - output/ios/
      - build/ios/

  ios-appstore:
    name: iOS App Store Build (App Store Profile Only)
    max_build_duration: 90
    instance_type: mac_mini_m2
    environment:
      flutter: 3.32.2
      java: 17
      xcode: 15.4
      cocoapods: 1.16.2
      vars:
        <<: *common_vars
        <<: *ios_build_acceleration
        <<: *app_config
        WORKFLOW_ID: "ios-appstore"
        BUNDLE_ID: $BUNDLE_ID
        PROFILE_TYPE: "app-store" # Fixed to app-store only

        # üîß Feature Flags
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_DOMAIN_URL: $IS_DOMAIN_URL
        <<: *feature_flags
        <<: *permissions
        <<: *ui_config

        # üî• Firebase Configuration
        FIREBASE_CONFIG_IOS: $FIREBASE_CONFIG_IOS

        # üçé iOS Signing Configuration (App Store Only)
        <<: *ios_signing_config

        # üì± iOS Distribution Options
        <<: *ios_distribution_options

        # üçé iOS Development Options
        <<: *ios_development_options

        # üìß Email Configuration (for notifications)
        ENABLE_EMAIL_NOTIFICATIONS: $ENABLE_EMAIL_NOTIFICATIONS
        EMAIL_SMTP_SERVER: $EMAIL_SMTP_SERVER
        EMAIL_SMTP_PORT: $EMAIL_SMTP_PORT
        EMAIL_SMTP_USER: $EMAIL_SMTP_USER
        EMAIL_SMTP_PASS: $EMAIL_SMTP_PASS

        # üîß Build Environment Variables
        CM_BUILD_ID: $CM_BUILD_ID
        CM_BUILD_DIR: $CM_BUILD_DIR
        OUTPUT_DIR: "output/ios"

    scripts:
      - name: Pre-build Setup
        script: |
          echo "üöÄ Starting iOS App Store Build with Enhanced Success Rate Optimizations..."
          echo "üìä Build Environment:"
          echo "  - Flutter: $(flutter --version | head -1)"
          echo "  - Java: $(java -version 2>&1 | head -1)"
          echo "  - Xcode: $(xcodebuild -version | head -1)"
          echo "  - CocoaPods: $(pod --version)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $0/1024/1024/1024 " GB"}')"
          echo "  - Profile Type: app-store (Fixed)"

          # Enhanced error handling
          set -euo pipefail
          trap 'echo "‚ùå Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

          # Pre-build cleanup and optimization
          echo "üßπ Pre-build cleanup..."
          flutter clean
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf .dart_tool/ 2>/dev/null || true
          rm -rf ios/Pods/ 2>/dev/null || true
          rm -rf ios/build/ 2>/dev/null || true

          # Optimize Xcode
          echo "‚ö° Optimizing Xcode configuration..."
          export XCODE_FAST_BUILD=true
          export COCOAPODS_FAST_INSTALL=true

          # Verify Firebase configuration
          if [ -n "$FIREBASE_CONFIG_IOS" ]; then
            echo "üî• Firebase configuration detected"
          else
            echo "‚ö†Ô∏è No Firebase configuration provided"
          fi

          # Enhanced Firebase validation based on PUSH_NOTIFY
          echo "üîç Validating Firebase configuration..."
          if [ "${PUSH_NOTIFY:-false}" = "true" ]; then
            echo "üîî Push notifications ENABLED - Firebase required"
            if [ -z "$FIREBASE_CONFIG_IOS" ]; then
              echo "‚ùå FIREBASE_CONFIG_IOS is required when PUSH_NOTIFY is true"
              exit 1
            else
              echo "‚úÖ Firebase configuration provided for push notifications"
            fi
          else
            echo "üîï Push notifications DISABLED - Firebase optional"
            if [ -n "$FIREBASE_CONFIG_IOS" ]; then
              echo "‚ö†Ô∏è Firebase configuration provided but PUSH_NOTIFY is false"
              echo "   Firebase will be disabled during build"
            fi
          fi

          # Verify iOS signing configuration
          if [ -n "$CERT_PASSWORD" ] && [ -n "$PROFILE_URL" ]; then
            echo "üîê iOS signing configuration detected"
          else
            echo "‚ö†Ô∏è Incomplete iOS signing configuration"
          fi

          # App Store profile type validation
          echo "üîç Validating profile type: app-store"
          if [ "$PROFILE_TYPE" != "app-store" ]; then
            echo "‚ùå Invalid profile type for App Store workflow: $PROFILE_TYPE"
            echo "   This workflow only supports app-store profile type"
            exit 1
          else
            echo "‚úÖ Valid App Store profile type: $PROFILE_TYPE"
          fi

          # Verify environment
          echo "‚úÖ Environment verification completed"

          # Enhanced build process validation
          echo "üîç Validating build process components..."

          # Get absolute path to project root
          PROJECT_ROOT=$(pwd)
          echo "üìÅ Project root: $PROJECT_ROOT"

          # Check for required scripts with absolute paths
          if [ -f "$PROJECT_ROOT/lib/scripts/ios/as_main.sh" ]; then
            echo "‚úÖ App Store build script found: $PROJECT_ROOT/lib/scripts/ios/as_main.sh"
          else
            echo "‚ùå App Store build script not found at: $PROJECT_ROOT/lib/scripts/ios/as_main.sh"
            echo "üìÇ Checking directory contents:"
            ls -la "$PROJECT_ROOT/lib/scripts/ios/" 2>/dev/null || echo "Directory not accessible"
            exit 1
          fi

          if [ -f "$PROJECT_ROOT/lib/scripts/ios/firebase.sh" ]; then
            echo "‚úÖ Firebase script found: $PROJECT_ROOT/lib/scripts/ios/firebase.sh"
          else
            echo "‚ùå Firebase script not found at: $PROJECT_ROOT/lib/scripts/ios/firebase.sh"
            exit 1
          fi

          if [ -f "$PROJECT_ROOT/lib/scripts/ios/generate_podfile.sh" ]; then
            echo "‚úÖ Podfile generator found: $PROJECT_ROOT/lib/scripts/ios/generate_podfile.sh"
          else
            echo "‚ùå Podfile generator not found at: $PROJECT_ROOT/lib/scripts/ios/generate_podfile.sh"
            exit 1
          fi

          echo "‚úÖ Build process components validated"

      - name: Setup Fastlane
        script: |
          echo "üì¶ Installing fastlane..."
          gem install fastlane
          fastlane --version
          echo "‚úÖ Fastlane setup completed"

      - name: Build iOS App Store App
        script: |
          chmod +x lib/scripts/ios/as_main.sh
          ./lib/scripts/ios/as_main.sh

      - name: Optional Fastlane Export (if available)
        script: |
          # Check if fastlane is available and IPA wasn't already created
          if command -v fastlane &> /dev/null && [ ! -f "output/ios/Runner.ipa" ] && [ -d "output/ios/Runner.xcarchive" ] && [ -f "ios/ExportOptions.plist" ]; then
            echo "üöÄ Fastlane available - attempting alternative export..."
            echo "üìã ExportOptions.plist contents:"
            cat ios/ExportOptions.plist
            
            # Create basic Gemfile if it doesn't exist
            if [ ! -f "Gemfile" ]; then
              echo "üìù Creating basic Gemfile for fastlane..."
              echo "source 'https://rubygems.org'" > Gemfile
              echo "" >> Gemfile
              echo "gem 'fastlane'" >> Gemfile
              echo "gem 'cocoapods'" >> Gemfile
              echo "‚úÖ Gemfile created"
            fi
            
            # Install fastlane if needed
            if [ ! -d ".bundle" ]; then
              echo "üì¶ Installing fastlane dependencies..."
              bundle install --path .bundle || echo "‚ö†Ô∏è Bundle install failed, trying without bundle"
            fi
            
            # Try fastlane gym export
            if [ -d ".bundle" ]; then
              echo "üîß Using bundle exec for fastlane..."
              bundle exec fastlane gym \
                --archive_path output/ios/Runner.xcarchive \
                --export_options ios/ExportOptions.plist \
                --output_directory output/ios/ \
                --output_name Runner.ipa \
                --clean
            else
              echo "üîß Using direct fastlane command..."
              fastlane gym \
                --archive_path output/ios/Runner.xcarchive \
                --export_options ios/ExportOptions.plist \
                --output_directory output/ios/ \
                --output_name Runner.ipa \
                --clean
            fi
            
            # Check if export was successful
            if [ -f "output/ios/Runner.ipa" ]; then
              echo "‚úÖ Fastlane export successful!"
              echo "üìä IPA size: $(du -h output/ios/Runner.ipa | cut -f1)"
              echo "üéØ Profile Type: app-store"
              echo "üì¶ Ready for App Store Connect upload"
            else
              echo "‚ö†Ô∏è Fastlane export failed, but archive is still available"
              echo "üì¶ Archive available at: output/ios/Runner.xcarchive"
              echo "üîß Manual export command:"
              echo "   xcodebuild -exportArchive -archivePath output/ios/Runner.xcarchive -exportPath output/ios/ -exportOptionsPlist ios/ExportOptions.plist"
            fi
          else
            if ! command -v fastlane &> /dev/null; then
              echo "‚ÑπÔ∏è Fastlane not available, skipping fastlane export"
            elif [ -f "output/ios/Runner.ipa" ]; then
              echo "‚ÑπÔ∏è IPA already exists from main build, skipping fastlane export"
            elif [ ! -d "output/ios/Runner.xcarchive" ]; then
              echo "‚ÑπÔ∏è Archive not found, skipping fastlane export"
            elif [ ! -f "ios/ExportOptions.plist" ]; then
              echo "‚ÑπÔ∏è ExportOptions.plist not found, skipping fastlane export"
            fi
          fi

      - name: Direct IPA Export (if archive exists)
        script: |
          # Check if archive exists and IPA doesn't
          if [ -d "output/ios/Runner.xcarchive" ] && [ ! -f "output/ios/Runner.ipa" ] && [ -f "ios/ExportOptions.plist" ]; then
            echo "üöÄ Attempting direct IPA export with App Store Connect API..."
            echo "üìã ExportOptions.plist contents:"
            cat ios/ExportOptions.plist
            
            # Check if App Store Connect API credentials are available
            if [[ -n "${APP_STORE_CONNECT_KEY_IDENTIFIER}" && -n "${APP_STORE_CONNECT_API_KEY_PATH}" && -n "${APP_STORE_CONNECT_ISSUER_ID}" ]]; then
              echo "üîê App Store Connect API credentials detected"
              echo "   Key ID: ${APP_STORE_CONNECT_KEY_IDENTIFIER}"
              echo "   Issuer ID: ${APP_STORE_CONNECT_ISSUER_ID}"
              echo "   API Key Path: ${APP_STORE_CONNECT_API_KEY_PATH}"
              
              # Download API key if it's a URL
              if [[ "${APP_STORE_CONNECT_API_KEY_PATH}" == http* ]]; then
                echo "üì• Downloading API key from URL..."
                API_KEY_PATH="/tmp/AuthKey.p8"
                if curl -fsSL -o "${API_KEY_PATH}" "${APP_STORE_CONNECT_API_KEY_PATH}"; then
                  echo "‚úÖ API key downloaded to ${API_KEY_PATH}"
                  
                  # Try export with App Store Connect API authentication
                  echo "üîê Attempting export with App Store Connect API authentication..."
                  xcodebuild -exportArchive \
                    -archivePath output/ios/Runner.xcarchive \
                    -exportPath output/ios/ \
                    -exportOptionsPlist ios/ExportOptions.plist \
                    -authenticationKeyPath "${API_KEY_PATH}" \
                    -authenticationKeyID "${APP_STORE_CONNECT_KEY_IDENTIFIER}" \
                    -authenticationKeyIssuerID "${APP_STORE_CONNECT_ISSUER_ID}"
                  
                  if [ -f "output/ios/Runner.ipa" ]; then
                    echo "‚úÖ Direct export with App Store Connect API successful!"
                    echo "üìä IPA size: $(du -h output/ios/Runner.ipa | cut -f1)"
                    echo "üéØ Profile Type: app-store"
                    echo "üì¶ Ready for App Store Connect upload"
                  else
                    echo "‚ö†Ô∏è Direct export failed, but archive is still available"
                  fi
                else
                  echo "‚ùå Failed to download API key, trying standard export..."
                  xcodebuild -exportArchive \
                    -archivePath output/ios/Runner.xcarchive \
                    -exportPath output/ios/ \
                    -exportOptionsPlist ios/ExportOptions.plist \
                    -allowProvisioningUpdates
                fi
              else
                echo "‚ö†Ô∏è API key path is not a URL, trying standard export..."
                xcodebuild -exportArchive \
                  -archivePath output/ios/Runner.xcarchive \
                  -exportPath output/ios/ \
                  -exportOptionsPlist ios/ExportOptions.plist \
                  -allowProvisioningUpdates
              fi
            else
              echo "‚ÑπÔ∏è App Store Connect API credentials not provided, trying standard export..."
              xcodebuild -exportArchive \
                -archivePath output/ios/Runner.xcarchive \
                -exportPath output/ios/ \
                -exportOptionsPlist ios/ExportOptions.plist \
                -allowProvisioningUpdates
            fi
            
            # Final check
            if [ -f "output/ios/Runner.ipa" ]; then
              echo "‚úÖ IPA export completed successfully!"
              echo "üìä IPA size: $(du -h output/ios/Runner.ipa | cut -f1)"
              echo "üì¶ Ready for App Store Connect upload"
            else
              echo "‚ö†Ô∏è All export attempts failed, but archive is available"
              echo "üì¶ Archive available at: output/ios/Runner.xcarchive"
              echo "üîß Manual export command:"
              echo "   xcodebuild -exportArchive -archivePath output/ios/Runner.xcarchive -exportPath output/ios/ -exportOptionsPlist ios/ExportOptions.plist"
            fi
          else
            if [ ! -d "output/ios/Runner.xcarchive" ]; then
              echo "‚ÑπÔ∏è Archive not found, skipping direct export"
            elif [ -f "output/ios/Runner.ipa" ]; then
              echo "‚ÑπÔ∏è IPA already exists, skipping direct export"
            elif [ ! -f "ios/ExportOptions.plist" ]; then
              echo "‚ÑπÔ∏è ExportOptions.plist not found, skipping direct export"
            fi
          fi

    artifacts:
      # üì± IPA Files (Primary artifacts)
      - output/ios/*.ipa
      - build/ios/ipa/*.ipa
      - ios/build/*.ipa
      - "*.ipa"

      # üì¶ Archive Files (When IPA export fails)
      - output/ios/*.xcarchive
      - build/ios/archive/*.xcarchive
      - ios/build/*.xcarchive
      - "*.xcarchive"

      # üìã Build Documentation
      - output/ios/ARTIFACTS_SUMMARY.txt
      - ios/ExportOptions.plist

      # üìä Build Logs
      - build/ios/logs/
      - output/ios/logs/

      # üîß Additional Build Artifacts
      - output/ios/
      - build/ios/
